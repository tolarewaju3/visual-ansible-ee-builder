name: Hosted EE Build

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Target image (e.g., quay.io/org/ee:tag)"
        required: true
      ee_yaml_path:
        description: "Path to execution-environment.yml (ignored if ee_zip_b64 used)"
        default: "test/execution-environment.yml"
        required: true
      ee_zip_b64:
        description: "Base64-encoded ZIP of EE files (optional)"
        required: false
      registry_username:
        description: "Registry username for pushing the image"
        required: true
      registry_password:
        description: "Registry password/token for pushing the image"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Mask sensitive inputs
        run: |
          echo "::add-mask::${{ github.event.inputs.registry_password }}"
          echo "::add-mask::${{ github.event.inputs.registry_username }}"
          if [ -n "${{ github.event.inputs.ee_zip_b64 }}" ]; then
            echo "::add-mask::${{ github.event.inputs.ee_zip_b64 }}"
          fi
      
      - name: Prepare workspace
        run: mkdir -p ee

      - name: Use repo files or reconstruct ZIP
        run: |
          if [ -n "${{ github.event.inputs.ee_zip_b64 }}" ]; then
            echo "Processing provided ZIP file..."
            echo "${{ github.event.inputs.ee_zip_b64 }}" | base64 -d > ee/ee.zip
            unzip ee/ee.zip -d ee
            echo "ZIP file extracted successfully"
          else
            echo "No ee_zip_b64 provided; using repo files at ${{ github.event.inputs.ee_yaml_path }}"
          fi

      - name: Checkout repo (for repo-based build)
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Locate EE files
        run: |
          if [ -f ee/execution-environment.yml ]; then
            echo "Using EE files from provided ZIP"
            echo "Found execution-environment.yml in ZIP"
            ls -la ee/execution-environment.yml ee/*.yml ee/*.txt 2>/dev/null || echo "Additional files: $(ls ee/ | tr '\n' ' ')"
          else
            echo "Using EE files from repository"
            mkdir -p ee
            cp "repo/${{ github.event.inputs.ee_yaml_path }}" ee/execution-environment.yml
            # Copy neighbors if present
            for f in requirements.yml requirements.txt bindep.txt ; do
              if [ -f "repo/$f" ]; then
                cp "repo/$f" "ee/$f"
                echo "Copied $f"
              fi
            done
            echo "EE files prepared from repository"
          fi

      - name: Install ansible-builder
        run: |
          python3 -m pip install --upgrade pip
          pip install "ansible-builder>=3.1"

      - name: Docker login
        env:
          REGISTRY_USERNAME: ${{ github.event.inputs.registry_username }}
          REGISTRY_PASSWORD: ${{ github.event.inputs.registry_password }}
        run: |
          REG="$(echo "${{ inputs.image }}" | awk -F/ '{print $1}')"
          echo "Logging into registry: $REG"
          echo "$REGISTRY_PASSWORD" | docker login --username "$REGISTRY_USERNAME" --password-stdin "$REG" > /dev/null 2>&1
          echo "Docker login successful"

      - name: Build EE
        working-directory: ee
        run: |
          test -f execution-environment.yml || { echo "missing execution-environment.yml"; exit 2; }
          ansible-builder build \
            -t "${{ inputs.image }}" \
            -f execution-environment.yml \
            --container-runtime docker

      - name: Push EE
        run: |
          echo "Pushing image to registry..."
          docker push "${{ inputs.image }}"
          echo "Image pushed successfully"
          
      - name: Cleanup sensitive files
        if: always()
        run: |
          # Remove any potentially sensitive files
          rm -rf ee/ee.zip
          rm -rf ee/
          # Clear Docker credentials
          docker logout > /dev/null 2>&1 || true
          echo "Cleanup completed"
